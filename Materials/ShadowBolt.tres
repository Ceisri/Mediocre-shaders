[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://Game/Shaders/Images/FreezeSnow.png" type="Texture" id=1]
[ext_resource path="res://Game/Shaders/Images/bump.jpg" type="Texture" id=2]
[ext_resource path="res://Game/Shaders/Images/beam.png" type="Texture" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode depth_draw_opaque, unshaded, shadows_disabled, cull_disabled;

uniform sampler2D noise_tex : hint_white;
uniform sampler2D displacement_texture; // Texture for vertex displacement
uniform sampler2D displacement_rate_texture; // Texture for displacement rate control

uniform vec4 root_color : hint_color = vec4(1.0, 0.75, 0.3, 1.0);
uniform vec4 middle_color : hint_color = vec4(1.0, 0.5, 0.1, 1.0);
uniform vec4 tip_color : hint_color = vec4(1.0, 0.03, 0.001, 1.0);

uniform float fire_alpha : hint_range(0.0, 1.0) = 1.0;
uniform vec2 fire_speed = vec2(0.0, 1.0);
uniform float fire_aperture : hint_range(0.0, 3.0) = 0.22;
uniform vec2 displacement_speed = vec2(0.5, 0.5); // Speed of displacement texture movement
uniform float displacement_amount : hint_range(0, 1) = 0.1; // Amount of vertex displacement
uniform float uv_scale_x : hint_range(0.1, 10.0) = 1.0; // UV scale X for manipulating UV size
uniform float uv_scale_y : hint_range(0.1, 10.0) = 1.0; // UV scale Y for manipulating UV size

// Vertex shader
void vertex() {
    vec2 uv = UV * vec2(uv_scale_x, uv_scale_y) + TIME * fire_speed; // Apply UV scaling and calculate scrolling UV coordinates for fire effect

    // Calculate displacement UV coordinates with movement
    vec2 displacement_uv = UV * vec2(uv_scale_x, uv_scale_y) + TIME * displacement_speed; // Apply UV scaling and animate UV for displacement texture
    float displacement_value = texture(displacement_texture, displacement_uv).r; // Use animated UV for displacement

    // Sample the displacement rate texture
    vec2 displacement_rate_uv = UV * vec2(uv_scale_x, uv_scale_y) + TIME * displacement_speed; // Apply UV scaling and animate UV for rate texture
    float displacement_rate = texture(displacement_rate_texture, displacement_rate_uv).r; // Control rate of displacement

    // Apply displacement based on the rate texture
    vec3 displacement = vec3(0.0, displacement_value * displacement_amount * displacement_rate, 0.0); // Displace along the Y axis

    // Apply displacement
    VERTEX += displacement; // Apply displacement
}

// Fragment shader
void fragment() {
    vec2 shifted_uv = UV * vec2(uv_scale_x, uv_scale_y) + TIME * fire_speed; // Apply UV scaling and calculate scrolling UV coordinates for fire effect
    float fire_noise = texture(noise_tex, shifted_uv).r;
    float noise = UV.y * (((UV.y + fire_aperture) * fire_noise - fire_aperture) * 75.0);

    // Calculate the mix factor for the middle color
    float middle_factor = smoothstep(0.4, 0.6, noise);

    // Mix the colors
    vec4 color_mix = mix(root_color, middle_color, middle_factor);
    vec4 fire_color = mix(middle_color, tip_color, noise * 0.05);

    // Set the final color and alpha
    ALPHA = clamp(noise, 0.0, 1.0) * fire_alpha;
    ALBEDO = fire_color.rgb;
}
"

[resource]
render_priority = 2
shader = SubResource( 1 )
shader_param/root_color = Color( 0.466667, 0.0666667, 1, 1 )
shader_param/middle_color = Color( 0.0666667, 0.0117647, 0.184314, 1 )
shader_param/tip_color = Color( 0.992157, 0, 1, 1 )
shader_param/fire_alpha = 1.0
shader_param/fire_speed = Vector2( 0, 1 )
shader_param/fire_aperture = 1.0
shader_param/displacement_speed = Vector2( 0, 0 )
shader_param/displacement_amount = 0.0
shader_param/uv_scale_x = 1.0
shader_param/uv_scale_y = 1.0
shader_param/noise_tex = ExtResource( 1 )
shader_param/displacement_texture = ExtResource( 2 )
shader_param/displacement_rate_texture = ExtResource( 3 )
