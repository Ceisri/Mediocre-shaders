[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://Game/World/Player/Textures/HFemStretchMarks.png" type="Texture" id=1]
[ext_resource path="res://Game/World/Player/Textures/HFem.png" type="Texture" id=2]

[sub_resource type="Shader" id=25]
code = "shader_type spatial;
render_mode async_visible,blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;

uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform sampler2D texture_stretch_marks; // StretchMarks texture
uniform float stretch_marks_opacity : hint_range(0.0, 1.0); // Opacity control for StretchMarks
uniform float stretch_marks_threshold : hint_range(0.0, 1.0) = 0.5; // Threshold for visibility
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
    UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
    vec2 base_uv = UV;
    
    // Base albedo texture
    vec4 albedo_tex = texture(texture_albedo, base_uv);
    albedo_tex *= COLOR;
    
    // StretchMarks texture with opacity and threshold
    vec4 stretch_marks_tex = texture(texture_stretch_marks, base_uv);
    float brightness = dot(stretch_marks_tex.rgb, vec3(0.299, 0.587, 0.114)); // Luminance calculation
    
    if (brightness > stretch_marks_threshold) {
        stretch_marks_tex.a *= stretch_marks_opacity;
    } else {
        stretch_marks_tex.a = 0.0; // Make dark parts fully transparent
    }
    
    // Mix StretchMarks with albedo texture
    vec4 combined_tex = mix(albedo_tex, stretch_marks_tex, stretch_marks_tex.a);
    
    ALBEDO = albedo.rgb * combined_tex.rgb;
    METALLIC = metallic;
    ROUGHNESS = roughness;
    SPECULAR = specular;
}
"

[resource]
resource_name = "skin"
shader = SubResource( 25 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/stretch_marks_opacity = 0.0
shader_param/stretch_marks_threshold = 0.5
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 0.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 1, 1, 1 )
shader_param/texture_albedo = ExtResource( 2 )
shader_param/texture_stretch_marks = ExtResource( 1 )
